// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  subscription  String    @default("free") // "free" | "pro"
  simulationsUsed Int     @default(0)
  simulationsLimit Int    @default(3)
  resetDate     DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  simulations Simulation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  id          String   @id @default(cuid())
  name        String
  description String?
  organization String
  level       String   // "federal" | "estadual" | "municipal"
  area        String   // "geral" | "especifico"
  questionsCount Int   @default(50)
  timeLimit   Int      @default(180) // minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  simulations Simulation[]
}

model Simulation {
  id          String   @id @default(cuid())
  userId      String
  examId      String
  status      String   @default("in_progress") // "in_progress" | "completed" | "abandoned"
  score       Int?
  totalQuestions Int
  correctAnswers Int?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  timeSpent   Int?     // minutes

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam Exam @relation(fields: [examId], references: [id])
  questions SimulationQuestion[]

  @@map("simulations")
}

model SimulationQuestion {
  id           String   @id @default(cuid())
  simulationId String
  questionText String   @db.Text
  options      String[] // Array of answer options
  correctAnswer Int     // Index of correct answer (0-based)
  userAnswer   Int?     // User's selected answer
  explanation  String?  @db.Text
  isCorrect    Boolean?
  createdAt    DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)

  @@map("simulation_questions")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  status            String   @default("inactive") // "active" | "inactive" | "canceled"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("subscriptions")
}
